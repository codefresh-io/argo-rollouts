name: Docker

on:
  push:
    branches:
      # - master  # commented due to Codefresh convention
      - release-*

  # Run tests for any PRs.
  pull_request:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions: {}

jobs:
  set-vars:
    permissions:
      contents: read
    runs-on: ubuntu-latest
    outputs:
      controller-meta-tags: ${{ steps.controller-meta.outputs.tags }}
      plugin-meta-tags: ${{ steps.plugin-meta.outputs.tags }}
      platforms: ${{ steps.platform-matrix.outputs.platform-matrix }}

    steps:
      - name: Docker meta (controller)
        id: controller-meta
        uses: docker/metadata-action@v4
        with:
          images: |
            quay.io/codefresh/argo-rollouts
          # ghcr.io/codefresh-io/argo-rollouts
          tags: |
            type=ref,event=branch
          # commented due to  Codefresh convention
          # flavor: |
          #   latest=${{ github.ref == 'refs/heads/master' }}

      - name: Docker meta (plugin)
        id: plugin-meta
        uses: docker/metadata-action@v4
        with:
          images: |
            quay.io/codefresh/kubectl-argo-rollouts
          # ghcr.io/codefresh-io/kubectl-argo-rollouts
          tags: |
            type=ref,event=branch
          # commented due to  Codefresh convention
          # flavor: |
          #   latest=${{ github.ref == 'refs/heads/master' }}

      # - name: Login to GitHub Container Registry
      #   if: github.event_name != 'pull_request'
      #   uses: docker/login-action@v1 
      #   with:
      #     registry: ghcr.io
      #     username: ${{ github.repository_owner }}
      #     password: ${{ secrets.GITHUB_TOKEN }}

      - name: Login to Quay.io
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          registry: quay.io
          username: ${{ secrets.QUAY_USERNAME }}
          password: ${{ secrets.QUAY_ROBOT_TOKEN }}

      # avoid building linux/arm64 for PRs since it takes so long
      - name: Set Platform Matrix
        id: platform-matrix
        run: |
          PLATFORM_MATRIX=linux/amd64
          if [ ${{ github.event_name != 'pull_request' }} = true ]; then
            PLATFORM_MATRIX=$PLATFORM_MATRIX,linux/arm64
          fi
          echo "platform-matrix=$PLATFORM_MATRIX" >> $GITHUB_OUTPUT

  build-and-push-controller-image:
    needs: [set-vars]
    permissions:
      contents: read
      packages: write  # for pushing packages to GHCR, which is used by cd.apps.argoproj.io to avoid polluting Quay with tags
      id-token: write # for creating OIDC tokens for signing.
    uses: ./.github/workflows/image-reuse.yaml
    with:
      quay_image_name: ${{ needs.set-vars.outputs.controller-meta-tags }}
      # Note: cannot use env variables to set go-version (https://docs.github.com/en/actions/using-workflows/reusing-workflows#limitations)
      go-version: 1.19
      platforms: ${{ needs.set-vars.outputs.platforms }}
      push: ${{ github.event_name != 'pull_request' }}
    secrets:
      quay_username: ${{ secrets.QUAY_USERNAME }}
      quay_password: ${{ secrets.QUAY_ROBOT_TOKEN }}

  build-and-push-plugin-image:
    needs: [set-vars]
    permissions:
      contents: read
      packages: write  # for pushing packages to GHCR, which is used by cd.apps.argoproj.io to avoid polluting Quay with tags
      id-token: write # for creating OIDC tokens for signing.
    uses: ./.github/workflows/image-reuse.yaml
    with:
      quay_image_name: ${{ needs.set-vars.outputs.plugin-meta-tags }}
      # Note: cannot use env variables to set go-version (https://docs.github.com/en/actions/using-workflows/reusing-workflows#limitations)
      go-version: 1.19
      platforms: ${{ needs.set-vars.outputs.platforms }}
      push: ${{ github.event_name != 'pull_request' }}
      target: kubectl-argo-rollouts
    secrets:
      quay_username: ${{ secrets.QUAY_USERNAME }}
      quay_password: ${{ secrets.QUAY_ROBOT_TOKEN }}
